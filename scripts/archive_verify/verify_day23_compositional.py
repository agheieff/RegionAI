#!/usr/bin/env python3
"""
Day 23: Verification of Compositional Algorithm Discovery
This script proves that the system can discover multi-step algorithms.
"""

import sys
import os
import torch

sys.path.insert(0, os.path.join(os.path.dirname(__file__), "..", "src"))

from regionai.spaces.concept_space import ConceptSpaceND
from regionai.engine.main import ReasoningEngine
from regionai.data.problem import Problem
from regionai.discovery.discover import discover_concept_from_failures
from regionai.discovery.transformation import PRIMITIVE_OPERATIONS, TransformationSequence


def test_compositional_discovery():
    """Test that the system can discover multi-step algorithms."""
    print("=" * 70)
    print("DAY 23: COMPOSITIONAL ALGORITHM DISCOVERY")
    print("=" * 70)
    
    # Verify SORT_DESCENDING is not available as a primitive
    print("\n1. SETUP - Verifying constraints")
    print("-" * 50)
    primitive_names = [p.name for p in PRIMITIVE_OPERATIONS]
    print(f"Available primitives: {', '.join(primitive_names)}")
    if "SORT_DESCENDING" in primitive_names:
        print("‚ùå ERROR: SORT_DESCENDING should not be available!")
        return False
    print("‚úì SORT_DESCENDING is not available (as intended)")
    
    # Create problems that require sorting in descending order
    print("\n\n2. PROBLEM DEFINITION - Sort in descending order")
    print("-" * 50)
    problems = [
        Problem(
            name="desc_sort_1",
            problem_type="transformation",
            input_data=torch.tensor([3.0, 1.0, 4.0, 1.0, 5.0]),
            output_data=torch.tensor([5.0, 4.0, 3.0, 1.0, 1.0]),
            description="Sort [3,1,4,1,5] ‚Üí [5,4,3,1,1]"
        ),
        Problem(
            name="desc_sort_2",
            problem_type="transformation",
            input_data=torch.tensor([2.0, 7.0, 1.0, 8.0]),
            output_data=torch.tensor([8.0, 7.0, 2.0, 1.0]),
            description="Sort [2,7,1,8] ‚Üí [8,7,2,1]"
        ),
        Problem(
            name="desc_sort_3",
            problem_type="transformation",
            input_data=torch.tensor([10.0, -5.0, 0.0]),
            output_data=torch.tensor([10.0, 0.0, -5.0]),
            description="Sort [10,-5,0] ‚Üí [10,0,-5]"
        ),
    ]
    
    print("Test problems:")
    for p in problems:
        print(f"  ‚Ä¢ {p.description}")
    
    # Run discovery
    print("\n\n3. DISCOVERY PHASE - Finding compositional solution")
    print("-" * 50)
    discovered = discover_concept_from_failures(problems)
    
    if not discovered:
        print("‚ùå Discovery failed!")
        return False
    
    print(f"\n‚úì Discovered concept: {discovered.name}")
    print(f"  Algorithm: {discovered.transformation_function}")
    
    # Analyze the discovered algorithm
    seq = discovered.transformation_function
    if not isinstance(seq, TransformationSequence):
        print("‚ùå Expected TransformationSequence!")
        return False
    
    if len(seq) != 2:
        print(f"‚ùå Expected 2-step sequence, got {len(seq)} steps")
        return False
    
    step_names = [t.name for t in seq.transformations]
    if step_names != ["SORT_ASCENDING", "REVERSE"]:
        print(f"‚ùå Expected [SORT_ASCENDING, REVERSE], got {step_names}")
        return False
    
    print("\n‚úì Correctly discovered: SORT_ASCENDING ‚Üí REVERSE")
    
    # Test generalization
    print("\n\n4. GENERALIZATION TEST - Novel inputs")
    print("-" * 50)
    
    # Create engine with discovered concept
    space = ConceptSpaceND()
    space.add_region(discovered.name, discovered)
    engine = ReasoningEngine(space)
    
    test_cases = [
        ([100.0, 50.0, 75.0, 25.0], [100.0, 75.0, 50.0, 25.0]),
        ([1.0], [1.0]),  # Single element
        ([3.0, 3.0, 3.0], [3.0, 3.0, 3.0]),  # All same
        ([-10.0, -20.0, -5.0, -15.0], [-5.0, -10.0, -15.0, -20.0]),  # All negative
        ([0.1, 0.5, 0.3, 0.7, 0.2], [0.7, 0.5, 0.3, 0.2, 0.1]),  # Decimals
    ]
    
    successes = 0
    for input_list, expected_list in test_cases:
        test_problem = Problem(
            name="test",
            problem_type="transformation",
            input_data=torch.tensor(input_list),
            output_data=torch.tensor(expected_list),
            description=f"{input_list} ‚Üí {expected_list}"
        )
        
        solution = engine.solve_problem(test_problem)
        if solution:
            print(f"  ‚úì {test_problem.description}")
            successes += 1
        else:
            print(f"  ‚úó FAILED: {test_problem.description}")
    
    print(f"\nResult: {successes}/{len(test_cases)} novel problems solved!")
    
    return successes == len(test_cases)


def demonstrate_compositional_power():
    """Show other possible compositions the system could discover."""
    print("\n\n5. THE POWER OF COMPOSITION")
    print("-" * 50)
    
    print("With just 8 primitives, we can create many algorithms:")
    print("\n‚Ä¢ SORT_DESCENDING = SORT_ASCENDING ‚Üí REVERSE")
    print("‚Ä¢ FIND_MAX = SORT_ASCENDING ‚Üí GET_LAST")
    print("‚Ä¢ FIND_MIN = SORT_ASCENDING ‚Üí GET_FIRST")
    print("‚Ä¢ FIND_SECOND_MAX = SORT_ASCENDING ‚Üí REVERSE ‚Üí GET_SECOND")
    print("‚Ä¢ COUNT_PLUS_ONE = COUNT ‚Üí ADD_ONE")
    print("\nAnd with deeper search:")
    print("‚Ä¢ MEDIAN (for odd length) = SORT ‚Üí GET_MIDDLE")
    print("‚Ä¢ RANGE = SORT ‚Üí [GET_LAST, GET_FIRST] ‚Üí SUBTRACT")
    
    print("\nüöÄ Compositional discovery enables emergent problem-solving!")


def trace_discovery_process():
    """Show step-by-step how BFS discovers the composition."""
    print("\n\n6. HOW BFS DISCOVERS COMPOSITIONS")
    print("-" * 50)
    
    print("Search process for SORT_DESCENDING:")
    print("\nDepth 1 - Single operations:")
    print("  ‚Ä¢ Try REVERSE ‚Üí ‚ùå [3,1,2] becomes [2,1,3], not [3,2,1]")
    print("  ‚Ä¢ Try SORT_ASCENDING ‚Üí ‚ùå [3,1,2] becomes [1,2,3], not [3,2,1]")
    print("  ‚Ä¢ Try ADD_ONE ‚Üí ‚ùå Wrong operation type")
    print("  ‚Ä¢ ... (all single ops fail)")
    
    print("\nDepth 2 - Two-operation sequences:")
    print("  ‚Ä¢ Try [REVERSE, REVERSE] ‚Üí ‚ùå Back to original")
    print("  ‚Ä¢ Try [REVERSE, SORT_ASCENDING] ‚Üí ‚ùå Wrong order") 
    print("  ‚Ä¢ Try [SORT_ASCENDING, REVERSE] ‚Üí ‚úì [3,1,2]‚Üí[1,2,3]‚Üí[3,2,1] ‚úì")
    print("\nüí° Found it! The BFS ensures we find the shortest solution.")


if __name__ == "__main__":
    if test_compositional_discovery():
        demonstrate_compositional_power()
        trace_discovery_process()
        print("\n" + "=" * 70)
        print("‚ú® Day 23 verification complete!")
        print("üéØ The system discovers compositional algorithms!")
        print("=" * 70)
    else:
        print("\n‚ùå Compositional discovery test failed!")